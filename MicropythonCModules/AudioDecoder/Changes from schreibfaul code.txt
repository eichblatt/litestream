The Vorbis and MP3 decoders come from https://github.com/schreibfaul1/ESP32-audioI2S/tree/master/src/vorbis_decoder and https://github.com/schreibfaul1/ESP32-audioI2S/tree/master/src/mp3_decoder respectively

To use them in MicroPython, they have to be compiled as a "user module" which can be written in C or C++. See https://micropython-usermod.readthedocs.io/

There is a core class (Decoder.c) which implements a C wrapper for the two decoders.

We need to modify the decoders a little bit to get them to compile in the MicroPython environment, and to implement correct memory management.


==================================
= Changes for the Vorbis Decoder =
==================================

************************************************************************************* NOTE *************************************************************************************
The latest vorbis decoder from https://github.com/schreibfaul1/ESP32-audioI2S/tree/master/src/vorbis_decoder doesn't work any more (crackling audio)
The latest build that worked was this version: https://github.com/schreibfaul1/ESP32-audioI2S/tree/dd1afff76f85f3dd2f82c7d601a428e3c38e9b4c (Commit name is "some var renamed")
********************************************************************************************************************************************************************************

1) Add extern "C"
In order to allow the C++ functions to be called by C, we have to bracket the entire vorbis_decoder.h file with:
#ifdef __cplusplus
extern "C" {
#endif

and

#ifdef __cplusplus
}
#endif


2) Memory allocations
The original uses:
#define __malloc_heap_psram(size) heap_caps_malloc_prefer(size, 2, MALLOC_CAP_DEFAULT | MALLOC_CAP_SPIRAM, MALLOC_CAP_DEFAULT | MALLOC_CAP_INTERNAL)
and
#define __calloc_heap_psram(ch, size) heap_caps_calloc_prefer(ch, size, 2, MALLOC_CAP_DEFAULT | MALLOC_CAP_SPIRAM, MALLOC_CAP_DEFAULT | MALLOC_CAP_INTERNAL)

We change them to use m_tracked_calloc & m_tracked_free with the following code in vorbis_decoder.cpp:
#define __malloc_heap_psram(size) m_tracked_calloc(1, size)
#define __calloc_heap_psram(ch, size) m_tracked_calloc(ch, size)
#define free(obj) m_tracked_free(obj)


3) Allow higher sample rates to be decoded
The original only allows files up to a sample rate of 64,000 to be decoded. This means that a uint16_t is sufficient to store the sample rate.
However, we found a file (1993-05-14) which had a sample rate of 96,000
The decoder was actually able to decode it, but was being prevented by "if(sampleRate < 4096 || sampleRate > 64000)"
The fix is:
    a) Update "uint16_t  s_vorbisSamplerate" in the global vars section of vorbis_decoder.cpp to "uint32_t  s_vorbisSamplerate", as we need a 32-bit variable to handle a sample rate of 96000
    b) Change the if statement in parseVorbisFirstPacket() to "if(sampleRate < 4096 || sampleRate > 96000)" 
    c) Change the log line below from %i to %u: "log_e("sampleRate is not valid sr=%u", sampleRate); 


===============================
= Changes for the MP3 Decoder =
===============================

1) Add extern "C"
In order to allow the C++ functions to be called by C, we have to bracket the entire MP3_decoder.h file with:
#ifdef __cplusplus
extern "C" {
#endif

and

#ifdef __cplusplus
}
#endif


2) Memory allocations
The original uses:
#ifdef CONFIG_IDF_TARGET_ESP32S3
    // ESP32-S3: If there is PSRAM, prefer it
    #define __malloc_heap_psram(size) \
        heap_caps_malloc_prefer(size, 2, MALLOC_CAP_DEFAULT|MALLOC_CAP_SPIRAM, MALLOC_CAP_DEFAULT|MALLOC_CAP_INTERNAL)
#else
    // ESP32, PSRAM is too slow, prefer SRAM
    #define __malloc_heap_psram(size) \
        heap_caps_malloc_prefer(size, 2, MALLOC_CAP_DEFAULT|MALLOC_CAP_INTERNAL, MALLOC_CAP_DEFAULT|MALLOC_CAP_SPIRAM)
#endif

We change them to use m_tracked_calloc with the following code:
#define __malloc_heap_psram(size) m_tracked_calloc(1, size)
#define free(obj) m_tracked_free(obj)
