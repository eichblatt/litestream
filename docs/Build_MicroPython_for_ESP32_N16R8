Install ESP-IDF
===============
cd $HOME
mkdir ~/esp
cd ~/esp
git clone -b v5.2.2 --recursive https://github.com/espressif/esp-idf.git
cd ~/esp/esp-idf
./install.sh esp32,esp32s3 (if you get weird errors try rm -rf ~/esp & rm -rf ~/.espressif & PATH=$(getconf PATH) and start again)


Install Micropython & compile cross compiler
============================================
cd $HOME
git clone -b vx.xx.x --recursive https://github.com/micropython/micropython.git (or leave out the -b vx.xx.x if you want the latest daily version)
cd ~/micropython/mpy-cross/
make


Set up the C modules (Display Driver and Audio Decoder) - only need to do this once
==================================================================================
cd $HOME
mkdir modules
nano ~/modules/micropython.cmake

Add the following lines:
# This top-level micropython.cmake is responsible for listing
# the individual modules we want to include.
# Paths are absolute, and ${CMAKE_CURRENT_LIST_DIR} can be
# used to prefix subdirectories.
include(${CMAKE_CURRENT_LIST_DIR}/AudioDecoder/micropython.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/st7789/micropython.cmake)

The Display Driver folder is copied into the modules directory in the next step. 
Also copy the files for the Audio Decoder to the modules directory.
See the MicropythonCModules folder in this GitHub repository for the Audio Decoder files.


Install ST7789 Display driver (from https://github.com/russhughes/st7789_mpy)
=============================================================================
cd $HOME
git clone https://github.com/russhughes/st7789_mpy.git
cp ~/st7789_mpy/fonts/bitmap/vga1_16x32.py ~/micropython/ports/esp32/modules
cp -r ~/st7789_mpy/st7789 ~/modules


Install Rotary Encoder Driver (from https://github.com/MikeTeachman/micropython-rotary)
=======================================================================================
cd $HOME
git clone https://github.com/MikeTeachman/micropython-rotary
cp ~/micropython-rotary/rotary.py ~/micropython/ports/esp32/modules
cp ~/micropython-rotary/rotary_irq_esp.py ~/micropython/ports/esp32/modules


Fix the knob-twiddling bug by putting I2S callbacks on their own queue
======================================================================
nano ~/micropython/ports/esp32/mpconfigport.h
Add the following:
#define MICROPY_SCHEDULER_STATIC_NODES (1)

nano ~/micropython/ports/esp32/machine_i2s.c
Add an "mp_sched_node_t I2S_node;" member to machine_i2s_obj_t

Add a new function:
static void call_I2S_callback(mp_sched_node_t *node) {
    machine_i2s_obj_t *self = (machine_i2s_obj_t*)((uintptr_t)node - offsetof(machine_i2s_obj_t, I2S_node));
    mp_call_function_1(self->callback_for_non_blocking, MP_OBJ_FROM_PTR(self));
}

In task_for_non_blocking_mode(), replace the call to mp_sched_schedule with one to mp_sched_schedule_node:
//mp_sched_schedule(descriptor.callback, MP_OBJ_FROM_PTR(self));
mp_sched_schedule_node(&self->I2S_node, call_I2S_callback);


Allow the one-shot timer to work even when queues are full
==========================================================
nano ~/micropython/ports/esp32/mpconfigport.h
Add the following:
#define MICROPY_SCHEDULER_STATIC_NODES (1)

nano ~/micropython/ports/esp32/machine_timer.h
Add an "mp_sched_node_t timer_node;" member to _machine_timer_obj_t

nano ~/micropython/ports/esp32/machine_timer.c
Add a new function:
static void call_timer_callback(mp_sched_node_t *node) {
    machine_timer_obj_t *self = (machine_timer_obj_t*)((uintptr_t)node - offsetof(machine_timer_obj_t, timer_node));
    mp_call_function_1(self->callback, MP_OBJ_FROM_PTR(self));
}

In machine_timer_isr(), replace the call to mp_sched_schedule with one to mp_sched_schedule_node:
//mp_sched_schedule(self->callback, self);
mp_sched_schedule_node(&self->timer_node, call_timer_callback);

Fix RingIO to handle >64kB buffers, and have a fast close() function
====================================================================
nano ~/micropython/py/objringio.c

Add this function above micropython_ringio_any():
static mp_obj_t micropython_ringio_stream_close(mp_obj_t self_in)
{
    micropython_ringio_obj_t *self = MP_OBJ_TO_PTR(self_in);

    self->ringbuffer.iget = self->ringbuffer.iput = 0;

    return mp_const_none;
}
// Define a Python reference to the function above.
static MP_DEFINE_CONST_FUN_OBJ_1(micropython_ringio_stream_close_obj, micropython_ringio_stream_close);

Change the dict table to reference this function and comment out the built-in close:
//{ MP_ROM_QSTR(MP_QSTR_close), MP_ROM_PTR(&mp_stream_close_obj) },
{ MP_ROM_QSTR(MP_QSTR_close), MP_ROM_PTR(&micropython_ringio_stream_close_obj) },

nano ~/micropython/py/ringbuf.h

Change the _ringbuf_t struct to have 32-bit vars instead of 16-bit vars:

typedef struct _ringbuf_t {
    uint8_t *buf;
    uint32_t size;
    uint32_t iget;
    uint32_t iput;
} ringbuf_t;


Allow the AudioDecoder C module to use tracked memory allocation
================================================================
nano ~/micropython/ports/esp32/mpconfigport.h
Add the following:
#define MICROPY_TRACKED_ALLOC (1)


Fix the SPI hang issue
======================
nano ~/micropython/ports/esp32/machine_hw_spi.c
In machine_hw_spi_transfer() change the call to spi_device_queue_trans() to the following:

if (spi_device_queue_trans(self->spi, transaction, portMAX_DELAY) != ESP_OK)
{
    mp_printf(&mp_plat_print,"SPIERR");
    spi_device_release_bus(self->spi);
    return;
}


Change the settings to enable the full 16MB of flash, and use the OTA partition scheme
======================================================================================
nano ~/micropython/ports/esp32/boards/ESP32_GENERIC_S3/sdkconfig.board

Change:
CONFIG_ESPTOOLPY_FLASHSIZE_8MB=
CONFIG_ESPTOOLPY_FLASHSIZE_16MB=y
CONFIG_PARTITION_TABLE_CUSTOM_FILENAME="partitions-16MiB-ota.csv" (or partitions-16MiB.csv)


Change the TCP parameters for faster download
=============================================
nano ~/micropython/ports/esp32/boards/ESP32_GENERIC_S3/sdkconfig.board

Add the following lines:
#
# TCP
#
CONFIG_SPIRAM_TRY_ALLOCATE_WIFI_LWIP=y
CONFIG_LWIP_TCP_NODELAY=y
CONFIG_LWIP_MAX_ACTIVE_TCP=16
CONFIG_LWIP_MAX_LISTENING_TCP=16
CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION=y
CONFIG_LWIP_TCP_MAXRTX=12
CONFIG_LWIP_TCP_SYNMAXRTX=12
CONFIG_LWIP_TCP_MSS=1460
CONFIG_LWIP_TCP_TMR_INTERVAL=200
CONFIG_LWIP_TCP_MSL=60000
CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT=20000
CONFIG_LWIP_TCP_SND_BUF_DEFAULT=5840
CONFIG_LWIP_TCP_RECVMBOX_SIZE=64
CONFIG_LWIP_TCPIP_RECVMBOX_SIZE=96
CONFIG_LWIP_TCP_QUEUE_OOSEQ=y
CONFIG_LWIP_TCP_SACK_OUT=y
CONFIG_LWIP_TCP_WND_DEFAULT=32768
CONFIG_LWIP_WND_SCALE=1
CONFIG_LWIP_TCP_RCV_SCALE=2
CONFIG_LWIP_IPV6=n
CONFIG_LWIP_TCP_RTO_TIME=1500

# WiFi
CONFIG_ESP_WIFI_DYNAMIC_RX_BUFFER_NUM=128


Start a terminal session to compile Micropython
===============================================
cd ~
. ~/esp/esp-idf/export.sh
cd micropython/ports/esp32
idf.py -B build-ESP32_GENERIC_S3 menuconfig (if required. See notes for setting to make interrupts work)
make BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=SPIRAM_OCT submodules
export IDF_TARGET=esp32s3
make BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=SPIRAM_OCT clean
make BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=SPIRAM_OCT USER_C_MODULES=~/modules/micropython.cmake


Flash the chip
==============
Previous steps will build micropython.bin in ~/micropython/ports/esp32/build-ESP32_GENERIC_S3-SPIRAM_OCT
bootloader.bin is under that in bootloader directory, partition-table.bin is in partition_table directory
(For Mike: Copy these to /mnt/c/Users/mike before flashing from Windows)

There is also a combined firmware.bin which is the three files above combined into one. If using the combined file, flash it at 0x00 offset

C:\Users\mike\OneDrive\Documents\ArduinoData\packages\esp32\tools\esptool_py\4.5.1\esptool -p COM4 -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
or
/home/mikealex/.espressif/python_env/idf4.4_py3.8_env/bin/python ../../../esp/esp-idf/components/esptool_py/esptool/esptool.py -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 build-GENERIC_S3_N16R8/bootloader/bootloader.bin 0x8000 build-GENERIC_S3_N16R8/partition_table/partition-table.bin 0x10000 build-GENERIC_S3_N16R8/micropython.bin
or
idf.py -p COM4 flash

(If you need to erase flash, the command is C:\Users\mike\OneDrive\Documents\ArduinoData\packages\esp32\tools\esptool_py\4.5.1\esptool -p COM4 -b 460800 erase_flash)


For Steve:
=============================
first source the file  $HOME/esp/esp-idf/export.sh
: ~ ; source $HOME/esp/esp-idf/export.sh 
Note: Make sure to disconnect from Jama before you flash!

: ~ ; cd $HOME/projects/litestream
: ~/projects/litestream ; source /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/activate

# old command
# sudo /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/python /home/steve/projects/esp/esp-idf/components/esptool_py/esptool/esptool.py -p /dev/ttyACM0 -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 ./bootloader.bin 0x8000 ./partition-table.bin 0x10000 ./micropython.bin

# New Command
cd to the MicropythonFirmware folder to flash.
: (idf4.4_py3.10_env) ~/projects/litestream/MicropythonFirmware/v1.20.0-74-g53cb07357 ; sudo /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/python /home/steve/esp/esp-idf/components/esptool_py/esptool/esptool.py -p /dev/ttyACM0 -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 ./bootloader.bin 0x8000 ./partition-table.bin 0x10000 ./micropython.bin

This fails, but i should be able to figure it out.

I think the problem is that I don't have the "pyserial" package installed **in the venv that I'm working in**. I have installed it, but it doesn't seem to be aware of it.

(idf4.4_py3.10_env) : ~/projects/litestream ; pip3 install pyserial

Installing the Software
=======================
Log into the device with Jama, and connect to WiFi.
import mip

mip.install("github:eichblatt/litestream/timemachine/package.json", version="vs1053", target="test_download")

where "version" is the branch or tag, and "target" is the folder to put the code into.

Then, copy the boot.py from the target folder to the root folder, so that it will run when booting up.


Connecting the device from PyMakr
=================================
On my machine, when I plug in the device, a file handle /dev/ttyACM0 is created to connect to it. It is owned by root, and since my vscode is running as me, I can't connect.
Run this command to change the permissions so that PyMakr can connect:
: ~ ; sudo chown steve /dev/ttyACM0 


Check that it worked
====================
To check free space: import os   os.statvfs('/'). Should show something like (4096, 4096, 3584, 3580, 3580, 0, 0, 0, 0, 255).  
File system block size, Fragment size, Size of fs in f_frsize units, Number of free blocks, Number of free blocks for unprivileged users, Number of inodes, Number of free inodes, Number of free inodes for unprivileged users, Mount flags, Maximum filename length
So file system size is 4096 x 3584 = 14 MB and free space is 4096 x 3580 = 13.98 MB
To see free memory: import gc    gc.mem_free()   Should be approx. 8,187,648 = 7.8 MB - However, changes have happened - read this https://github.com/orgs/micropython/discussions/12316
To check version: import platform     platform.platform()

Notes:
======
I got errors and had to rm -r ~/.espressif/ and then ./install.sh esp32,esp32s3 again
The ESP-IDF build system does not support spaces in the paths to either ESP-IDF or to projects
No longer true? Keeping for posterity. Micropython interrupts don't work on ESP32-S3 - see https://github.com/micropython/micropython/issues/8488. 
    Have to run menuconfig and set the single core flag (under ComponentConfig->FreeRTOS->Run FreeRTOS only on first Core) - not sure this is relevant any more
If you get errors about wrong paths for the compiler, you may need to add the correct paths.
export PATH=/home/mikealex/.espressif/tools/xtensa-esp32s3-elf/esp-2021r2-patch5-8.4.0/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-g++:$PATH
export PATH=/home/mikealex/.espressif/tools/xtensa-esp32s3-elf/esp-2021r2-patch5-8.4.0/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc:$PATH
e.g. ESP-IDF v4.4.4 includes "patch5". Then do a "make BOARD=GENERIC_S3_SPIRAM_OCT clean" and build again.

OTA Updates:
===========
1. Remove the contents of the MicropythonFirmware/latest folder, if any.
1. Copy the contents of the folder containing the latest release of micropython.bin to MicropythonFirmware/latest/
: ~/projects/litestream/MicropythonFirmware ; cp v1.20.0-348-g24a6e951e-dirty/* latest/.
2. Compute the sha of the micropython file
    sha256sum micropython.bin > micropython.sha
3. Commit and push this folder contents sha to github.
