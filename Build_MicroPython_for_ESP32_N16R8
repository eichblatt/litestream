To flash MicroPython on the ESP32-S3 N16R8 (16MB Flash & 8MB SRAM) you can flash firmware.bin from
https://www.micropython.org/download/GENERIC_S3_SPIRAM_OCT/ but it will not use the full memory

The alternative is to build Micropython from source - info taken from 
https://github.com/Mythologyli/MicroPython-ESP32-S3-N16R8

Install ESP-IDF
===============
cd $HOME
mkdir -p ~/esp
cd ~/esp
git clone -b v4.4 --recursive https://github.com/espressif/esp-idf.git
cd ~/esp/esp-idf
./install.sh esp32,esp32s3 (if you get weird errors try rm -rf ~/esp & rm -rf ~/.espressif & PATH=$(getconf PATH) and start again)


Install Micropython & compile cross compiler
============================================
cd $HOME
git clone -b v1.19.1 --recursive https://github.com/micropython/micropython.git
cd ~/micropython/mpy-cross/
make


Install Board config
====================
cd $HOME
git clone https://github.com/Mythologyli/MicroPython-ESP32-S3-N16R8.git
cp -r ~/MicroPython-ESP32-S3-N16R8/GENERIC_S3_N16R8 ~/micropython/ports/esp32/boards (may need to delete CMakeCache.txt from build-GENERIC_S3_N16R8 or run clean)


Install ST7789 Driver
=====================
git clone https://github.com/russhughes/st7789_mpy.git
cp ~/st7789_mpy/fonts/bitmap/vga1_16x32.py ~/micropython/ports/esp32/modules


Start a terminal session
========================
cd $HOME
. $HOME/esp/esp-idf/export.sh
cd micropython/ports/esp32
idf.py -B build-GENERIC_S3_N16R8 menuconfig (if required)
make submodules
export IDF_TARGET=esp32s3
make BOARD=GENERIC_S3_N16R8 USER_C_MODULES=../../../../st7789_mpy/st7789/micropython.cmake


Flash the chip
==============
Previous steps will build micropython.bin in ~/micropython/ports/esp32/build-GENERIC_S3_N16R8
bootloader is under that in bootloader directory, partition table is in partition_table directory

C:\Users\mike\OneDrive\Documents\ArduinoData\packages\esp32\tools\esptool_py\4.2.1\esptool -p COM4 -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
or
/home/mikealex/.espressif/python_env/idf4.4_py3.8_env/bin/python ../../../esp/esp-idf/components/esptool_py/esptool/esptool.py -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 build-GENERIC_S3_N16R8/bootloader/bootloader.bin 0x8000 build-GENERIC_S3_N16R8/partition_table/partition-table.bin 0x10000 build-GENERIC_S3_N16R8/micropython.bin
or
idf.py -p COM13 flash


For Steve:
first source the file  $HOME/projects/esp/esp-idf/export.sh

cd to $HOME/projects/litestream

sudo /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/python /home/steve/projects/esp/esp-idf/components/esptool_py/esptool/esptool.py -p /dev/ttyACM0 -b 460800 --before default_reset --after no_reset --chip esp32s3  write_flash --flash_mode dio --flash_size detect --flash_freq 80m 0x0 ./bootloader.bin 0x8000 ./partition-table.bin 0x10000 ./micropython.bin

This fails, but i should be able to figure it out.

I think the problem is that I don't have the "pyserial" package installed **in the venv that I'm working in**. I have installed it, but it doesn't seem to be aware of it.

Pyserial is not installed for /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/python. Check the README for installation instructions.
Traceback (most recent call last):
  File "/home/steve/projects/esp/esp-idf/components/esptool_py/esptool/esptool.py", line 39, in <module>
    import serial
ModuleNotFoundError: No module named 'serial'

: ~/projects/litestream ; source /home/steve/.espressif/python_env/idf4.4_py3.10_env/bin/activate
(idf4.4_py3.10_env) : ~/projects/litestream ; pip3 install pyserial
Now I get a new error:
serial.serialutil.SerialException: [Errno 2] could not open port /dev/ttyACM0: [Errno 2] No such file or directory: '/dev/ttyACM0'

Duh! the device is unplugged!
: ~/projects/deadstream ; sudo screen  /dev/ttyACM0 115200
and I have a repl!!!

Check that it worked
====================
To check free space: import os   os.statvfs('/'). Should show something like (4096, 4096, 3584, 3580, 3580, 0, 0, 0, 0, 255).  
File system block size, Fragment size, Size of fs in f_frsize units, Number of free blocks, Number of free blocks for unprivileged users, Number of inodes, Number of free inodes, Number of free inodes for unprivileged users, Mount flags, Maximum filename length
So file system size is 4096 x 3584 = 14 MB and free space is 4096 x 3580 = 13.98 MB
To see free memory: import gc    gc.mem_free()   Should be approx. 8,187,648 = 7.8 MB
To check version: import platform     platform.platform()

Notes:
======
I got errors and had to rm -r .espressif/ and then ./install.sh esp32,esp32s3 again
The ESP-IDF build system does not support spaces in the paths to either ESP-IDF or to projects
Looks like v1.19.1 has issues with ESP32-S3 SPI. Removing the -b v1.19.1 when cloning MicroPython (and therefore getting the latest dev version) fixed it.
